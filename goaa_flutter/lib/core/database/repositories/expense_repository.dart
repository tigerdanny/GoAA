import "package:drift/drift.dart"; import "../database.dart"; class ExpenseRepository { final AppDatabase _database = AppDatabase(); Future<List<Expense>> getUserGroupExpenses(int userId, {int? limit}) async { try { final userGroups = await (_database.select(_database.groupMembers)..where((tbl) => tbl.userId.equals(userId))).get(); if (userGroups.isEmpty) { return []; } final groupIds = userGroups.map((g) => g.groupId).toList(); final query = _database.select(_database.expenses)..where((tbl) => tbl.groupId.isIn(groupIds))..orderBy([(tbl) => OrderingTerm.desc(tbl.expenseDate)]); if (limit != null) { query.limit(limit); } return await query.get(); } catch (e) { rethrow; } } Future<void> close() async { await _database.close(); } }
